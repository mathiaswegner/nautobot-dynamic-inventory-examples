---
# nautobot_inventory.yml file in YAML format
# Example command line: ansible-inventory -v --list -i nautobot_inventory.yml
#
# See the Nautobot documentation at
# https://nautobot.readthedocs.io/en/latest/api/overview/
#
plugin: networktocode.nautobot.inventory
api_endpoint: https://nautobot.example.com

# set the network_os based on the network_driver attribute in Nautobot
compose:
  ansible_network_os: platform.network_driver

# Either uncomment token and insert READ ONLY API token
# or put API token in an environment variable NAUTOBOT_TOKEN
# token: <INSERT YOUR API TOKEN HERE>

# Get config context from devices or not
config_context: False
# Will not add the group_by choice name to the group names
group_names_raw: True

# automatically create device groups based on these attributes
# see documentation for list of possible attributes
group_by:
  - device_roles
  - tags
  - platforms

# create group named junos
groups:
  junos: " platform.slug in ['juniper-junos'] "

# include dns_name host_var
dns_name: True

# has_primary_ip is a useful way to filter out patch panels and other
# passive devices
device_query_filters:
  - has_primary_ip: 'true'

# Query filters are passed directly as an argument to the fetching queries.
# You can repeat tags in the query string.
# the query_filters work as a logical **OR**
# query_filters:
#   - platform: juniper_junos
#   - platform: cisco_ios

# You can use keyed_groups to group on properties of devices or VMs.
# NOTE: It's only possible to key off direct items on the device/VM objects.
keyed_groups:
  - prefix: status
    key: status.value
  - prefix: ''
    key: platform.napalm_driver

# Prefix any custom fields with cf_ and pass the field value with the
# regular Nautobot query string

# query_filters:
#   - cf_foo: bar

# Nautobot inventory plugin also supports Constructable semantics
# You can fill your hosts vars using the compose option:

# compose:
#   foo: last_updated
#   bar: display
#   nested_variable: rack.display
